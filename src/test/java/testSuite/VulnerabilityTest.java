package testSuite;

import io.qameta.allure.*;
import io.restassured.response.Response;
import jdk.jfr.Description;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Order;
import org.junit.jupiter.api.Test;

import static io.qameta.allure.SeverityLevel.CRITICAL;
import static io.restassured.RestAssured.given;

public class VulnerabilityTest {
    Response response;
    String idScan;
    String host = "http://localhost:9292";
    @Test
    @Order(2)
    @DisplayName("Scanner Vulnerability")
    @Description("Scanner Vulnerability")
    @Severity(CRITICAL)
    @Owner("Moises")
    @Link(name="Website", url= "https://demo.owasp-juice.shop/#/")
    @Issue("Defect-1234")
    @TmsLink("TMS-456")
    @Epic("Seguridad")
    @Feature("Scanner Vulnerability")
    @Story("Scanner Vulnerability")
    public void scannerVulnerabilityTest() throws InterruptedException {
        startScanner();
        waitScanIsCompleted();
    }
    @Step("Se selecciona el Host y se inicia el escaneo de vulnerabilidades")
    private void startScanner() {
        // iniciar escaneo POST/GET  >  http://localhost:9292/JSON/ascan/action/scan/?url=HOST
        response= given().
                queryParam("url","https://demo.owasp-juice.shop/#/").
                log().all()
                .when()
                .get(host+"/JSON/ascan/action/scan/");

        response.then().log().all();
        String idScan = response.then().extract().path("scan");
        System.out.println("id >>>> "+idScan);
    }
    @Step("Se espera a que el escaneo de vulnerabilidades este al 100%")
    private void waitScanIsCompleted() throws InterruptedException {

        // esperar hasta que este en 100%
        //http://localhost:9292/JSON/ascan/view/status/?scanId=ID
        String status = "0";

        do{
            Thread.sleep(1000);
            response = given().
                    queryParam("scanId", idScan).
                    log().all()
                    .when()
                    .get(host+"/JSON/ascan/view/status/");
            response.then().log().all();
            status = response.then().extract().path("status");
            System.out.println("Progress >>>> "+status);
        }while (!status.equals("100"));
        System.out.println("status completado al 100% "+status);
    }
    @Step("Se genera el reporte de vulnerabilidades")
    @AfterEach
    public void generateReport(){
        //Obtener Lista de Vulnerabilidades
        // http://localhost:9292/JSON/ascan/view/alerts/?scanId=ID
        response = given().
                queryParam("scanId",idScan).
                log().all()
                .when()
                .get(host+"/HTML/ascan/view/scanProgress/");
        response.then().log().all();
        attachReport("Reporte de Vulnerabilidades", response.getBody().asString());
        // generar el reporte HTML
        // http://localhost:9292/OTHER/core/other/htmlreport/?scanId=ID
        response= given().
                log().all()
                .when()
                .get(host+"/OTHER/core/other/htmlreport/");

        response.then().log().all();
        attachReport("Reporte de Vulnerabilidades OWASP", response.getBody().asString());
        System.out.println("Reporte generado");
    }
    @Attachment(value = "{0}", type = "text/html")
    public String attachReport(String name, String content){
        return content;
    }

}
